@startuml


DStream <|-- InputDStream


InputDStream <|-- DirectKafkaInputDStream

InputDStream <|-- ReceiverInputDStream


ReceiverInputDStream <|-- KafkaInputDStream

abstract class DStream{
	final def getOrCompute(time: Time): Option[RDD[T]] 

	 def map()
	 def flatMap()
}

abstract class InputDStream{
	val rateController

	def start()

}

abstract class ReceiverInputDStream{
    val rateController:ReceiverRateController

	def getReceiver(): Receiver

	def start()
}

class DirectKafkaInputDStream{
    val rateController: DirectKafkaRateController
    override def compute(validTime: Time): Option[KafkaRDD]

    def start()

}


class KafkaInputDStream{

	def getReceiver(): Receiver

	def start()
}






@enduml